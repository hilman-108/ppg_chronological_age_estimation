# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PPG.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtCore import QDate, QSize
from PyQt5.QtGui import QIcon
from pyqtgraph import PlotWidget
import pyqtgraph as pg
from random import randint
import serial
import sys
import os
import numpy as np
from scipy import signal
from scipy.signal import find_peaks
import numpy as np
import pickle
import xlsxwriter
import statistics
from scipy.integrate import simps
import time
import datetime
import pandas as pd
from sklearn.svm import SVC
from sklearn.multiclass import OneVsOneClassifier

def filter_butter(sinyal):
    fs = 100
    fcl = 10
    wl = fcl / (fs / 2)
    b, a = signal.butter(6, wl, 'low')
    hasil = signal.filtfilt(b, a, sinyal)
    return (hasil)

def normalisasi_z (ppg): # Fungsi untuk normalisasi standar deviasi
    mean = np.mean(ppg)
    std = np. std (ppg)
    ppg = [((i-mean)/std) for i in ppg]
    return(ppg)

def normalisasi_max(fil): # Fungsi untuk normalisasi minâˆ’max
    maks = max(fil)
    mins = min( fil )
    fil = [((i-mins)/(maks-mins)) for i in fil]
    return( fil )

def auc(sinyal, B_kiri, B_kanan):
    sig = sinyal[B_kiri:B_kanan]
    luas = simps(sig)
    return(luas)

def preprocessing(data):
    filtering = filter_butter(data)
    norm = normalisasi_max(filtering)
    norm = np.array(norm)
    peaks, _ = find_peaks(norm, height=0.6)
    ss = []
    for i in range(len(peaks)):
        if (i == 0):
            b_kiri = norm[0:peaks[i]]
            batas_kiri = np.argmin(b_kiri)
        else:
            b_kiri = norm[peaks[i - 1]:peaks[i]]
            if (len(b_kiri)) < 16:
                b_kiri = norm[peaks[i - 2]:peaks[i]]

            li_kiri = np.argmin(b_kiri)
            batas_kiri = peaks[i - 1] + li_kiri

        try:
            b_kanan = norm[peaks[i]:peaks[i + 1]]
            if (len(b_kanan)) < 16:
                b_kanan = norm[peaks[i]:peaks[i + 2]]
        except:
            b_kanan = norm[peaks[i]:len(norm)]

        li_kanan = np.argmin(b_kanan)
        batas_kanan = peaks[i] + li_kanan

        ppg = norm[batas_kiri:batas_kanan]

        if (len(ppg)) < 32:
            continue
        ss.append(ppg)
    return (ss)

def turunan(ppg):
    raw_ppg = ppg[1]
    raw_vpg = np.gradient(raw_ppg)
    raw_apg = np.gradient(raw_vpg)
    sinyal_ppg = normalisasi_z(raw_ppg)
    sinyal_vpg = normalisasi_z(raw_vpg)
    sinyal_apg = normalisasi_z(raw_apg)
    return (sinyal_ppg,sinyal_vpg,sinyal_apg)

def deteksi_gelombang(ppg):
    aa = []
    ba = []
    ca = []
    da = []
    ea = []
    ai = []
    bi = []
    ci = []
    di = []
    ei = []
    S = []
    D = []
    Sa = []
    Da = []
    PPG_Signal = []
    for x in range(15):
        ppg_raw = ppg[x]
        ppg_norm = normalisasi_z(ppg_raw)
        max_ppg = np.argmax(ppg_norm)
        PPG_Signal.append(ppg_norm)
        S.append(max_ppg)
        Sa.append(ppg_norm[max_ppg])

        vpg_raw = np.gradient(ppg_norm)
        vpg = np.array(vpg_raw)
        apg_raw = np.gradient(vpg)
        apg_norm = normalisasi_z(apg_raw)
        apg = np.array(apg_norm)

        max_vpg = np.argmax(vpg)
        mins_vpg, _ = find_peaks(vpg * -1)
        min_vpg_interval = vpg[max_vpg:len(vpg)]
        min_vpg_amp = np.amin(min_vpg_interval)
        min_vpg_index = np.where(vpg == min_vpg_amp)
        lembah_vpg = min_vpg_index[0][0]

        max_apg = np.argmax(apg)
        peaks_apg, _ = find_peaks(apg)
        mins_apg, _ = find_peaks(apg * -1)
        p_apg = np.where(peaks_apg > max_apg)
        l_apg = np.where(mins_apg > max_apg)
        if (p_apg[0].size < 1 or l_apg[0].size < 1):
            continue

        a = apg[max_apg]
        aa.append(a)
        ai.append(max_apg)

        b = apg[mins_apg[l_apg[0][0]]]
        b_i = mins_apg[l_apg[0][0]]
        ba.append(b)
        bi.append(b_i)
        ce = np.where((peaks_apg > max_apg) & (peaks_apg < lembah_vpg))

        if (ce[0].size >= 1):
            c = apg[peaks_apg[ce[0][0]]]
            d = apg[mins_apg[l_apg[0][1]]]
            e = apg[peaks_apg[p_apg[0][1]]]
            ca.append(c)
            da.append(d)
            ea.append(e)
            ci.append(peaks_apg[ce[0][0]])
            di.append(mins_apg[l_apg[0][1]])
            ei.append(peaks_apg[p_apg[0][1]])

            mins_ppg = np.where(mins_apg > peaks_apg[p_apg[0][1]])
            try:
                D_i = mins_apg[mins_ppg[0][0]]
            except:
                interval_Di = peaks_apg[p_apg[0][1]] - mins_apg[l_apg[0][1]]
                D_i = peaks_apg[p_apg[0][1]] + interval_Di
            D.append(D_i)
            Da.append(ppg_norm[D_i])

        elif (ce[0].size == 0):
            c = apg[lembah_vpg - 4]
            d = apg[lembah_vpg]
            e = apg[peaks_apg[p_apg[0][0]]]

            c_i = lembah_vpg - 4
            d_i = lembah_vpg

            ea.append(e)
            ei.append(peaks_apg[p_apg[0][0]])

            ca.append(c)
            da.append(d)
            ci.append(c_i)
            di.append(d_i)

            mins_ppg = np.where(mins_apg > peaks_apg[p_apg[0][0]])
            try:
                D_i = mins_apg[mins_ppg[0][0]]
            except:
                interval_Di = peaks_apg[p_apg[0][0]] - d_i
                D_i = peaks_apg[p_apg[0][0]] + interval_Di
            D.append(D_i)
            Da.append(ppg_norm[D_i])
    return (aa, ba, ca, da, ea, ai, bi, ci, di, ei, S, D, Sa, Da, PPG_Signal)

def analisis(aa, ba, ca, da, ea, ai, bi, ci, di, ei, S, D, Sa, Da, PPG_Signal):
    f1, f2, f3 = (ba[0] - ca[0] - da[0] - ea[0]) / aa[0], (ba[1] - ca[1] - da[1] - ea[1]) / aa[1], (ba[2] - ca[2] - da[2] - ea[2]) / aa[2]
    f4, f5, f6 = (ca[0] + da[0] - ba[0]) / aa[0], (ca[1] + da[1] - ba[1]) / aa[1], (ca[2] + da[2] - ba[2]) / aa[2]
    f7, f8, f9 = (ba[0] - ea[0]) / aa[0], (ba[1] - ea[1]) / aa[1], (ba[2] - ea[2]) / aa[2]
    f10, f11, f12 = ba[0] / aa[0], ba[1] / aa[1], ba[2] / aa[2]
    f13, f14, f15 = ca[0] / aa[0], ca[1] / aa[1], ca[2] / aa[2]
    f16, f17, f18 = da[0] / aa[0], da[1] / aa[1], da[2] / aa[2]
    f19, f20, f21 = ea[0] / aa[0], ea[1] / aa[1], ea[2] / aa[2]
    f22, f23, f24 = auc(PPG_Signal[0], 0, ei[0]), auc(PPG_Signal[1], 0, ei[1]), auc(PPG_Signal[2], 0, ei[2])  # A1 Area
    f25, f26, f27 = auc(PPG_Signal[0], ei[0], len(PPG_Signal[0])), auc(PPG_Signal[1], ei[1], len(PPG_Signal[1])), auc(PPG_Signal[2], ei[2], len(PPG_Signal[2]))  # A2 Area
    f28, f29, f30 = ei[0], ei[1], ei[2]  # A1_Time
    f31, f32, f33 = len(PPG_Signal[0]) - ei[0], len(PPG_Signal[1]) - ei[1], len(PPG_Signal[2]) - ei[2]  # A2_Time
    f34, f35, f36 = S[0], S[1], S[2]  # CT(Crest Time)
    f37, f38, f39 = D[0] - S[0], D[1] - S[1], D[2] - S[2]  # DT (Delta Time)
    f40, f41, f42 = Sa[0], Sa[1], Sa[2]  # ESP (Early Systolic Peak)
    f43, f44, f45 = Da[0], Da[1], Da[2]  # LSP (Late Systolic Peak)
    f46, f47, f48 = Da[0] / Sa[0], Da[1] / Sa[1], Da[2] / Sa[2]  # RI(Reflection Index)
    f49, f50, f51 = aa[0], aa[1], aa[2]  # a_peak
    f52, f53, f54 = ba[0], ba[1], ba[2]  # b_peak
    f55, f56, f57 = ca[0], ca[1], ca[2]  # c_peak
    f58, f59, f60 = da[0], da[1], da[2]  # d_peak
    f61, f62, f63 = ea[0], ea[1], ea[2]  # e_peak
    f64, f65, f66 = (ca[0] - ba[0]) / ci[0] - bi[0], (ca[1] - ba[1]) / ci[1] - bi[1], (ca[2] - ba[2]) / ci[2] - bi[2]  # bc_slope
    f67, f68, f69 = (da[0] - ba[0]) / di[0] - bi[0], (da[1] - ba[1]) / di[1] - bi[1], (da[2] - ba[2]) / di[2] - bi[2]  # bd_slope
    f70, f71, f72 = ci[0] - bi[0], ci[1] - bi[1], ci[2] - bi[2]  # cb_interval
    f73, f74, f75 = di[0] - bi[0], di[1] - bi[1], di[2] - bi[2]  # db_interval
    f76, f77, f78 = bi[0] - ai[0], bi[1] - ai[1], bi[2] - ai[2]  # ab_interval
    f79, f80, f81 = ci[0] - ai[0], ci[1] - ai[1], ci[2] - ai[2]  # ac_interval
    f82, f83, f84 = di[0] - ai[0], di[1] - ai[1], di[2] - ai[2]  # ad_interval
    f85, f86, f87 = ei[0] - ai[0], ei[1] - ai[1], ei[2] - ai[2]  # ae_interval
    f88, f89, f90 = len(PPG_Signal[0]), len(PPG_Signal[1]), len(PPG_Signal[2])  # AT(Area Time)
    return (f4, f5, f6, f61, f62, f63, f70, f71, f72)

with open('Model_Semua_Usia_Percobaan', "rb") as file:
    svm_model = pickle.load(file)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(1000, 600)
        MainWindow.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(10, 50, 41, 41))
        self.pushButton.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:10px;")
        self.pushButton.setText("")
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setIcon(QIcon('PPG1.png'))
        self.pushButton.setIconSize(QSize(37, 37))

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(10, 100, 41, 41))
        self.pushButton_2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:10px;")
        self.pushButton_2.setText("")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.setIcon(QIcon('Analisis1.png'))
        self.pushButton_2.setIconSize(QSize(35, 35))

        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 150, 41, 41))
        self.pushButton_3.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:10px;")
        self.pushButton_3.setText("")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.setIcon(QIcon('Reset1.png'))
        self.pushButton_3.setIconSize(QSize(35, 35))

        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(10, 200, 41, 41))
        self.pushButton_4.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:10px;")
        self.pushButton_4.setText("")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.setIcon(QIcon('Save1.png'))
        self.pushButton_4.setIconSize(QSize(35, 35))

        self.graphicsView = PlotWidget(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(60, 50, 931, 251))
        self.graphicsView.setObjectName("graphicsView")
        sx = list(range(1500))
        sumbu_x = [i / 100 for i in sx]
        self.x = [i - 15 for i in sumbu_x]
        self.y = [0] * 1500
        pen = pg.mkPen(color=(255, 0, 0), width=2)
        self.graphicsView.setLabel('left', 'Amplitude(V)')
        self.graphicsView.setLabel('bottom', 'Time(s)')
        self.graphicsView.showGrid(x=True, y=True)

        self.tanggal = QDate.currentDate()
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(600, 0, 391, 21))
        self.label.setStyleSheet("color: rgb(255, 255, 0);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.label.setAlignment(QtCore.Qt.AlignRight)

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 330, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_2.setObjectName("label_2")
        self.radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton.setGeometry(QtCore.QRect(40, 380, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.radioButton.setFont(font)
        self.radioButton.setStyleSheet("color: rgb(255, 255, 255);")
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_2.setGeometry(QtCore.QRect(40, 420, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_3.setGeometry(QtCore.QRect(40, 460, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.radioButton_3.setFont(font)
        self.radioButton_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.radioButton_3.setObjectName("radioButton_3")
        self.graphicsView_2 = PlotWidget(self.centralwidget)
        self.graphicsView_2.setGeometry(QtCore.QRect(140, 330, 411, 221))
        self.graphicsView_2.setObjectName("graphicsView_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(570, 340, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(570, 380, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(570, 430, 421, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)

        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(710, 340, 16, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(710, 380, 16, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_9.setObjectName("label_9")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(730, 340, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(17)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("color: rgb(255, 255, 255);")
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(730, 380, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(17)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_2.setPlaceholderText('yyyy-mm-dd')
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(600, 20, 391, 21))
        self.label_6.setStyleSheet("color: rgb(255, 255, 0);")
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.label_6.setAlignment(QtCore.Qt.AlignRight)

        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(570, 470, 421, 41))
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)

        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(570, 510, 421, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_10.setText("")
        self.label_10.setObjectName("label_10")
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(20, 560, 541, 16))
        self.label_11.setStyleSheet("color: rgb(255, 255, 0);")
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(570, 550, 421, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.label_12.setFont(font)
        self.label_12.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_12.setObjectName("label_12")
        self.label_12.setAlignment(QtCore.Qt.AlignCenter)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1000, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.fs = 100
        self.prediksi = 0
        self.sinyal_ppg = []
        self.sinyal_vpg = []
        self.sinyal_apg = []
        self.ss_sx = []
        self.ss_sy = []
        self.hasil = []

        self.data_line_ss = self.graphicsView_2.plot(self.ss_sx, self.ss_sy, pen=pen)
        self.graphicsView_2.setLabel('left', 'Amplitude(V)')
        self.graphicsView_2.setLabel('bottom', 'Time(s)')

        self.data_line = self.graphicsView.plot(self.x, self.y, pen=pen)
        self.timer = QtCore.QTimer()
        self.timer.setInterval(10)

        self.pushButton.clicked.connect(self.plot_raw_data)
        self.pushButton_2.clicked.connect(self.analisis_data)

        self.radioButton.toggled.connect(lambda: self.btnstate(self.radioButton))
        self.radioButton_2.toggled.connect(lambda: self.btnstate(self.radioButton_2))
        self.radioButton_3.toggled.connect(lambda: self.btnstate(self.radioButton_3))
        self.radioButton.setChecked(True)

        self.pushButton_3.clicked.connect(self.reset)
        self.pushButton_4.clicked.connect(self.save_file)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Age Estimation System"))
        self.pushButton.setToolTip(_translate("MainWindow", "Connect PPG Sensor"))
        self.pushButton_2.setToolTip(_translate("MainWindow", "Analyze The Signal"))
        self.pushButton_3.setToolTip(_translate("MainWindow", "Reset"))
        self.pushButton_4.setToolTip(_translate("MainWindow", "Save"))
        self.label_2.setText(_translate("MainWindow", "Signals :"))
        self.radioButton.setText(_translate("MainWindow", "PPG"))
        self.radioButton_2.setText(_translate("MainWindow", "VPG"))
        self.radioButton_3.setText(_translate("MainWindow", "APG"))
        self.label_3.setText(_translate("MainWindow", "Name             "))
        self.label_4.setText(_translate("MainWindow", "Date of Birth  "))
        self.label_8.setText(_translate("MainWindow", ":"))
        self.label_9.setText(_translate("MainWindow", ":"))


    def update_raw_data(self):
        if ser.isOpen():
            line = ser.readline()
            try:
                string = line.decode('ascii')
            except:
                string = self.x[-1]
            num = float(string)

            self.x = self.x[1:]  # Remove the first y element.
            self.x.append(self.x[-1] + 0.01)  # Add a new value 1 higher than the last.
            self.y = self.y[1:]  # Remove the first
            self.y.append(num)  # Add a new random value.
            self.data_line.setData(self.x, self.y)
        else:
            ser.open()

    def plot_raw_data(self):
        self.nama = self.lineEdit.text()
        self.tgl_lahir = self.lineEdit_2.text()

        if (self.nama == '' or self.tgl_lahir == '') :
            print('Please Enter Name and Date of Birth')
        elif (len(self.tgl_lahir) < 10 or len(self.tgl_lahir) > 10):
            print('Enter your birthday in the format yyyy-mm-dd')
        else:
            self.label.setText(self.tanggal.toString())
            self.timer.timeout.connect(self.update_raw_data)
            self.timer.start()
            self.akuisisisinyal_star = time.time()

    def analisis_data(self):
        self.akuisisisinyal_stop = time.time()
        self.pengolahansinyal_star = time.time()
        self.timer.stop()

        hari_ini = datetime.date.today()
        tahun_ini = int(hari_ini.year)
        bulan_ini = int(hari_ini.month)
        tanggal_ini = int(hari_ini.day)
        tahun_lahir = int(self.tgl_lahir[0:4])
        bulan_lahir = int(self.tgl_lahir[5:7])
        tanggal_lahir = int(self.tgl_lahir[8:10])
        if (bulan_lahir > bulan_ini):
            self.usia_kronologis = tahun_ini - tahun_lahir - 1
        elif (bulan_lahir < bulan_ini):
            self.usia_kronologis = tahun_ini - tahun_lahir
        elif (bulan_lahir == bulan_ini):
            if (tanggal_lahir > tanggal_ini):
                self.usia_kronologis = tahun_ini - tahun_lahir - 1
            else:
                self.usia_kronologis = tahun_ini - tahun_lahir


        ppg_filt = filter_butter(self.y)
        prep = preprocessing(ppg_filt)
        self.sinyal_ppg, self.sinyal_vpg, self.sinyal_apg = turunan(prep)
        a, b, c, d, e, ai, bi, ci, di, ei, S, D, Sa, Da, PPG_Signal = deteksi_gelombang(prep)
        for k in range(5):
            m = k * 3
            n = (k + 1) * 3
            result = analisis(a[m:n], b[m:n], c[m:n], d[m:n], e[m:n], ai[m:n], bi[m:n], ci[m:n], di[m:n], ei[m:n],S[m:n], D[m:n], Sa[m:n], Da[m:n], PPG_Signal[m:n])
            self.hasil.append(result)

        hasilprediksi = svm_model.predict(self.hasil)
        numbers = hasilprediksi.tolist()
        duplicates = [number for number in numbers if numbers.count(number) > 1]
        unique_duplicates = list(set(duplicates))
        usia = round(statistics.mean(numbers))

        mae = abs(self.usia_kronologis-usia)
        mape = abs((self.usia_kronologis-usia)/self.usia_kronologis)*100
        mae = round(mae, 2)
        mape = round(mape, 2)
        Nilai_Error = "MAE: " + str(mae) + " Years    " + "MAPE: " + str(mape) + " %"
        self.label_12.setText(Nilai_Error)

        self.pengolahansinyal_stop = time.time()

        self.penampilandata_star = time.time()
        durasi = len(self.sinyal_ppg) / self.fs
        self.ss_sy = np.array(self.sinyal_ppg)
        self.ss_sx = np.linspace(0, durasi, len(self.ss_sy))
        self.data_line_ss.setData(self.ss_sx, self.ss_sy)

        self.prediksi = usia
        self.label_5.setText('Predicted Age')
        self.label_7.setText(str(self.prediksi))
        self.label_10.setText('Years')

        self.penampilandata_stop = time.time()

        durasi_akuisisisinyal = round((self.akuisisisinyal_stop-self.akuisisisinyal_star)*1000)
        durasi_pengolahansinyal = round((self.pengolahansinyal_stop-self.pengolahansinyal_star)*1000)
        durasi_penampilandata = round((self.penampilandata_stop-self.penampilandata_star)*1000)
        self.waktu_proses = (10 + durasi_akuisisisinyal + durasi_pengolahansinyal + durasi_penampilandata)/1000
        waktu_proses_d = "Process Time: " + str(self.waktu_proses) + " sec"
        self.label_6.setText(waktu_proses_d)
        time_sequence = "Data Acquisition: " + str(durasi_akuisisisinyal) + " ms | " + "Signal Processing: " + str(durasi_pengolahansinyal) + " ms | " + "Display Data: " + str(durasi_penampilandata) + " ms"
        self.label_11.setText(time_sequence)
    def btnstate(self, b):
        if b.isChecked():
            if b.text() == "PPG":
                durasi = len(self.sinyal_ppg) / self.fs
                self.ss_sy = np.array(self.sinyal_ppg)
                self.ss_sx = np.linspace(0, durasi, len(self.ss_sy))
                self.data_line_ss.setData(self.ss_sx, self.ss_sy)
            elif b.text() == "VPG":
                durasi = len(self.sinyal_vpg) / self.fs
                self.ss_sy = np.array(self.sinyal_vpg)
                self.ss_sx = np.linspace(0, durasi, len(self.ss_sy))
                self.data_line_ss.setData(self.ss_sx, self.ss_sy)
            elif b.text() == "APG":
                durasi = len(self.sinyal_apg) / self.fs
                self.ss_sy = np.array(self.sinyal_apg)
                self.ss_sx = np.linspace(0, durasi, len(self.ss_sy))
                self.data_line_ss.setData(self.ss_sx, self.ss_sy)

    def reset(self):
        ser.close()
        self.timer.stop()

        sx = list(range(1500))
        self.x = [i / 100 for i in sx]
        self.y = [0] * 1500
        self.data_line.setData(self.x, self.y)

        self.ss_sx = []
        self.ss_sy = []
        self.hasil = []
        self.data_line_ss.setData(self.ss_sx, self.ss_sy)

        self.lineEdit.clear()
        self.lineEdit_2.clear()
        self.label.clear()
        self.label_5.clear()
        self.label_6.clear()
        self.label_7.clear()
        self.label_10.clear()
        self.label_11.clear()
        self.label_12.clear()
        self.count_2 = 0
        self.prediksi = 0


    def save_file(self):

        usia_prediksi = ("% d" + " Years") % self.prediksi
        durasi_prediksi = str(self.waktu_proses) +" Sec"

        fname = QFileDialog.getSaveFileName(None, "Save File", " ", "(*.xlsx)")
        namaFile = os.path.basename(fname[0])


        workbook = xlsxwriter.Workbook(namaFile)
        worksheet = workbook.add_worksheet("ID")
        worksheet.write('B2', 'Name                                           :')
        worksheet.write('B3', 'Date of Birth                             :')
        worksheet.write('B4', 'Prediction Age                         :')
        worksheet.write('B5', 'Date (Measurement)            :')
        worksheet.write('B6', 'Process Time                            :')
        worksheet.write('E2', self.nama)
        worksheet.write('E3', self.tgl_lahir)
        worksheet.write('E4', usia_prediksi)
        worksheet.write('E5', self.tanggal.toString())
        worksheet.write('E6', durasi_prediksi)

        worksheet1 = workbook.add_worksheet("RawData")
        row = 0
        column = 0
        for item in (self.y):
            worksheet1.write(row, column, item)
            row += 1
        workbook.close()

        data_st = pd.read_excel(r'D:\Documents\Pycharm\DataST_Percobaan.xlsx')
        data_usia = data_st['Usia'].values.tolist()
        cols = ['F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9']
        data_fitur = data_st[cols].values.tolist()

        ft = list(self.hasil[0])
        data_fitur.append(ft)
        data_usia.append(self.usia_kronologis)

        svc = SVC(kernel='linear', C=1, tol=1e-03)
        o_vs_o = OneVsOneClassifier(svc)
        o_vs_o.fit(data_fitur, data_usia)

        with open("Model_Semua_Usia_Percobaan", "wb") as file:
            pickle.dump(o_vs_o, file)
        print("Model saved.")

        df_fitur = pd.DataFrame(data_fitur, columns=['F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9'], dtype=float)
        df_usia = pd.DataFrame(data_usia, columns=['Usia'], dtype=int)
        df_all = pd.concat([df_fitur, df_usia], axis=1)
        with pd.ExcelWriter(r'D:\Documents\Pycharm\DataST_Percobaan.xlsx') as writer:
            df_all.to_excel(writer, sheet_name='data', index=False)

        print("Finish")


if __name__ == "__main__":
    ser = serial.Serial('COM3', 9600)
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
